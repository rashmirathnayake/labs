#include <iostream> 
#include <list> 
using namespace std; 
 
struct Node { 
    int label;   // data type int called label      
    list<int> neighbours;   // a int type list called neighbours
}; 
 
struct Graph { 
     //graph will have an array of type "node" with length specified by n
    int n = 8; 
    Node* nodes = new Node[n]; 
 
    void initializeNodes() { 
         
        for (int i = 0; i < n; i++) { 
            nodes[i].label = i + 1; 
        } 
    } 
 
    void addEdge(int u, int v) { 
         
        nodes[u - 1].neighbours.push_back(v); //select node u and push v into u's neighbour
        nodes[v - 1].neighbours.push_back(u); //select node v and push u into v's neighbour
    } 
 
    void print() { 
         //lets iterate through each node and print its neighbours

        for (int i = 0; i < n; i++) { 
            cout << nodes[i].label << "--> "; 
            for (int neighbour : nodes[i].neighbours) { 
                cout << neighbour << " "; 
            } 
            cout << endl; 
        } 
    } 
}; 
 
int main() { 
    Graph* g = new Graph; 
    g->initializeNodes(); 
     
    g->addEdge(1, 2); 
    g->addEdge(1, 3); 
    g->addEdge(1, 4); 
    g->addEdge(1, 5); 
    g->addEdge(2, 3); 
    g->addEdge(2, 6); 
    g->addEdge(4, 6); 
    g->addEdge(4, 7); 
    g->addEdge(4, 8); 
    g->addEdge(5, 6); 
    g->addEdge(5, 7); 
    g->addEdge(5, 8); 
     
    g->print(); 
    return 0; 
}
